!<arch>
0-isupper.c/    0           0     0     644     219       `
#include "main.h"
/**
 * _isupper - checks if c is uppercase
 * @c: the var to be evaluated
 *
 * Return: 1 for uppercase else 0
 */
int _isupper(int c)
{

	if (c >= 'A' && c <= 'Z')
	return (1);


	else
	return (0);
}

0-memset.c/     0           0     0     644     314       `
#include "main.h"
/**
 * *_memset - fills memory with a constant byte.
 * @s: character poniter/string
 * @b: constant byte to file
 * @n: number of bytes to fill
 * Return: new string
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
	s[i] = b;
	i++;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     328       `
#include "main.h"
/**
 * *_strcat - concatenates two strings
 * @dest: string pointer
 * @src: string pointer
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
		i++;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';

	return (dest);

}
100-atoi.c/     0           0     0     644     419       `
#include "main.h"
/**
 * _atoi - convert a string to an integer
 * @s: the character pointer
 * Return: integer
 */
int _atoi(char *s)
{
	int sign = 1, i = 0;
	unsigned int res = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
		if (s[i] == '-')
			sign *= -1;
		i++;

	}
	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
	{
		res = (res * 10) + (s[i] - '0');
		i++;
	}
	res *= sign;
	return (res);
}

1-isdigit.c/    0           0     0     644     184       `
#include "main.h"
/**
 * _isdigit - evaluates if its a digit
 * @c: var to be evaluated
 * Return: 1 if a digit 0  otherwise
 */

int _isdigit(int c)
{
	return (c >= 48 && c <= 57);
}
1-memcpy.c/     0           0     0     644     355       `
#include "main.h"
/**
 * *_memcpy - a function that copies memory area.
 * @dest: pointer to memory area to print to
 * @src: pointer to memory area to copy from
 * @n: number of bytes to copy
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{

	dest[i] = src[i];
	i++;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     424       `
#include "main.h"
/**
 * *_strncat - concatenates two strings
 * @dest: string pointer
 * @src: string pointer
 * @n: number of bytes from src
 * Return: a pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0, j = 0;

	while (dest[i] != '\0')
		i++;
	while (src[j] != '\0' && n > j)
	{
		dest[i] = src[j];
		j++;
		i++;

	}
	if (n > 0)
	{
		dest[i] = '\0';
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     342       `
#include "main.h"
/**
 * *_strchr - function that locates a character in a string.
 * @s: pointer to a string
 * @c: character to locate
 * Return: string after occurance of the character
 */
char *_strchr(char *s, char c)
{
	unsigned int i;

	for (i = 0; s[i] != '\0'; i++)
		if (s[i] == c)
			break;
	return (s[i] == c ? (s + i) : '\0');
}
2-strlen.c/     0           0     0     644     221       `
#include "main.h"
/**
 * _strlen - returns length of a string
 * @s: string to find length
 * Return: length of a string
 */
int _strlen(char *s)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
	continue;
	}
	return (i);
}

2-strncpy.c/    0           0     0     644     414       `
#include "main.h"
/**
 * *_strncpy - copies a string
 * @dest: string pointer
 * @src: string pointer
 * @n: number of bytes to use from src
 * Return: string
 */
char *_strncpy(char *dest, char *src, int n)
{

	int i = 0;
	int j = 0;

	while (n > j)
	{
		if (src[j] == '\0')
		{
			for (; j < n; j++)
			{
			dest[i] = '\0';
			i++;
			}
		}
		else
		{
		dest[i] = src[j];
		j++;
		i++;
		}
	}

	return (dest);
}
3-islower.c/    0           0     0     644     247       `
#include "main.h"

/**
 * _islower - checks if a character is lowercase
 *@c: The chacter to be checked
 * Return: 1 if a character is lowercase 0 otherwise
 */
int _islower(int c)
{

	if (c >= 'a' && c <= 'z')

	return (1);
	else
	return (0);

}

3-puts.c/       0           0     0     644     205       `
#include "main.h"
/**
 * _puts - prints string
 * @str: pointer character
 * Return void
 */
void _puts(char *str)
{

	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
	_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     290       `
#include "main.h"
/**
 * _strcmp - concatenates two strings
 * @s1: first string
 * @s2: second string
 * Return: nteger
 */
int _strcmp(char *s1, char *s2)
{

	int i = 0;
	int cmp = 0;

	while (s1[i] != '\0' && s2[i] != '\0' && cmp == 0)
	{
	cmp = s1[i] - s2[i];
	i++;
	}
	return (cmp);
}
3-strspn.c/     0           0     0     644     437       `
#include "main.h"
/**
 * _strspn - function that gets the length of a prefix substring
 * @s:pointer string
 * @accept:searching string
 * Return: number of bytes in the initial segment of s
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (j = 0; *(s + j); j++)
	{
		for (i = 0; *(accept + i); i++)
		{
			if (*(s + j) == *(accept + i))
				break;
		}
		if (*(accept + i) == '\0')
			break;
	}
	return (j);
}

4-isalpha.c/    0           0     0     644     280       `
#include "main.h"

/**
 * _isalpha -checks if c is alphabetic character
 * @c: the value to be checked
 * Return: 1 if alphabetic character else 0
 */

int _isalpha(int c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);

	}
	else
	{
		return (0);

	}
}
4-strpbrk.c/    0           0     0     644     414       `
#include "main.h"
/**
 * *_strpbrk - searches a string for any of a set of bytes
 * @s: string
 * @accept: string to search
 * Return: pointer to searched string
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; *(s + i); i++)
	{

	for (j = 0; *(accept + j); j++)
	{

	if (*(s + i) == *(accept + j))
	{
	break;
	}
	}
	if (*(accept + j) != '\0')
	{
	return (s + i);
	}
	}
	return (0);
}
5-strstr.c/     0           0     0     644     411       `
#include "main.h"
/**
 * *_strstr - function that locates a substring.
 * @haystack: source string
 * @needle: string to locate
 * Return: char
 */
char *_strstr(char *haystack, char *needle)
{

	int i;

while (*haystack != '\0')
{
i = 0;
while (*haystack == *needle && *needle != '\0')
i++, haystack++, needle++;
if (*needle == '\0')
return (haystack - i);
haystack -= (i - 1), needle -= i;
}
return ('\0');
}

6-abs.c/        0           0     0     644     268       `
#include "main.h"
/**
 * _abs - computes absolute value of an integer
 * @n: takes in the integer
 * Return: always 0 (success)
 */
int _abs(int n)

{

	if (n < 0)

	{

		return (n * (-1));

	}

	else if (n == 0)

	{

		return (0);

	}

	else

	{

		return (n);

	}
}
9-strcpy.c/     0           0     0     644     384       `
#include "main.h"
/**
 * *_strcpy - copies the string pointed to by src
 * to the buffer pointed to by dest.
 * @dest: char pointer
 * @src: char pointer
 * Return: value of the pointer dest
 */
char *_strcpy(char *dest, char *src)
{
	int i, length;

	for (length = 0; src[length] != '\0'; length++)
	{
	}
	for (i = 0; i <= length ; i++)
	{
		dest[i] = src[i];
	}

	return (dest);

}
_putchar.c/     0           0     0     644     24        `
int _putchar(char c)
{}
